type: edu
files:
- name: src/animals/Main.java
  visible: true
  text: |
    package animals;

    public class Main {
    }
  learner_created: false
- name: test/file-formats.data.yaml
  visible: false
  text: |-
    ---
    - - json
    - - xml
    - - yaml
  learner_created: false
- name: test/file-formats.script.yaml
  visible: false
  text: |+
    #
    # This is a script to test file formats: JSON, YAML, XML.
    #
    ---
    - [start, "-type {0}"]
    - [matches, "(?si).*animal.*", The program should asks the user for a favourite animal]
    - [input, cat]
    - - contains
      - You think of an animal, and I guess it.
      - The program should asks the user to think of an animal
    - [input, ""] # Press Enter to start the game
    #
    # The first game started
    #
    - - contains
      - Is it a cat?
      - The program should asks the user is it the cat
    - [input, no]
    - - contains
      - I give up. What animal do you have in mind?
      - The program should give up
    - [input, dog]
    - - contains
      - Specify a fact that distinguishes a cat from a dog
      - The program should find out how one animal differs from another.
    - [input, It can climbs tree]
    - - contains
      - Is the statement correct for a dog?
      - The program should clarify if the statement is correct for a dog.
    - [input, No]
    - - matches
      - (?si).*(again|repeat|one more game).*
      - The program should ask to play again
    - [input, Yes]
    - - contains
      - You think of an animal, and I guess it.
      - The program should asks the user to think of an animal
    - [input, ""] # Press Enter to start the game
    #
    # The second game started
    #
    - - contains
      - Can it climbs tree?
      - The only question in the knowledge tree should be "Can it climbs tree?"
    - [input, Yes]
    - - contains
      - Is it a cat?
      - The program doesn't print the expected message
    - [input, No]
    - - contains
      - I give up. What animal do you have in mind?
      - The program should give up
    - - input
      - a lynx
    - - input
      - It is living in the forest
    - - contains
      - Is the statement correct for a lynx?
      - The program doesn't print the expected message
    - [input, Yes]
    - [input, No]
    - [finish, The program should finish when the user refuse the new game]
    - - file exists
      - "animals.{0}"
      - When the program started with option "java -type {0}" the data should be saved to "animals.{0}"

    #
    # Start the program again and load the Knowledge Tree
    #

    - [start, "-type {0}"]
    - - not contains
      - Which animal do you like most?
      - If knowledge base is exist the program should not asks the user for a favourite animal
    - - contains
      - You think of an animal, and I guess it.
      - The program should asks the user to think of an animal
    - [input, ""]
    #
    # The third game started. Test for the Knowledge Tree.
    #
    - - contains
      - Can it climbs tree?
      - The root question in knowledge tree should be "Can it climbs tree?"
    - [input, yes]
    - - contains
      - Is it living in the forest?
      - The second question should be 'Is it living in the forest?'
    - [input, sure]
    - - contains
      - Is it a lynx?
      - The last question should be 'Is it a lynx?'
    - [input, right]
    - - matches
      - (?si).*(again|repeat|one more game).*
      - The program should ask to play again
    - [input, No]
    - [finish, The program should finish when the user refuse the new game]
    #
    # Clear workspace after the test
    #
    - - file delete
      - "animals.{0}"
      - "The test can't delete animals.{0} file."

  learner_created: false
- name: test/GuessAnimalTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.io.File;
    import java.util.stream.Stream;

    public class GuessAnimalTest extends StageTest<String> {
        final String[] script = new String[]{
                "the-first-question",
                "positive-answers",
                "negative-answers",
                "unclear-answers",
                "file-formats"
        };

        @DynamicTest(data = "script")
        CheckResult runScripts(final String script) {
            return new Scenario(script).check();
        }

        @DynamicTest
        CheckResult testFileFormats() {
            deleteTestFiles();
            final var result = new Scenario("file-formats").check();
            deleteTestFiles();
            return result;
        }

        private void deleteTestFiles() {
            Stream.of("yaml", "json", "xml")
                    .map("animals."::concat)
                    .map(File::new)
                    .filter(File::exists)
                    .forEach(File::delete);
        }
    }
  learner_created: false
- name: test/negative-answers.data.yaml
  visible: false
  text: |
    #
    # The possible negative answers
    #
    ---
    # The program must ignore the case of letters.
    - - n
    - - N
    # The user can put a point
    - - n.
    - - N.
    # An exclamation mark is also allowed.
    - - n!
    - - N!
    # The program must ignore leading spaces.
    - - "   No"
    # As well ignore trailing spaces.
    - - "No   "
    # All of the following expressions are valid answers.
    - - no
    - - nO
    - - NO
    - - No
    - - no.
    - - no!
    - - No!
    - - NO!
    - - no way
    - - no way!
    - - No Way!
    - - NO WAY!
    - - no waY.
    - - nah
    - - Nah.
    - - NAH!
    - - naH
    - - nope
    - - NoPe!
    - - NOPE.
    - - negative
    - - Negative.
    - - i don't think so
    - - I don't think so
    - - I don't think so.
    - - I don't Think SO.
    - - yeah no
    - - yeah no.
    - - yeah no!
    - - yeah NO!
  learner_created: false
- name: test/negative-answers.script.yaml
  visible: false
  text: |
    #
    # This is a script to test the correct interpretation of negative answers.
    #
    ---
    - [start]
    - [input, cat]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it a cat?", "The program should ask: \"Is it a cat?\""]
    #
    # Here we substitute all values from the data file
    #
    - [input, "{0}"]
    - - not contains
      - "yes or no"
      - "The answer \"{0}\" should be treated as correct negative."
  learner_created: false
- name: test/positive-answers.data.yaml
  visible: false
  text: |-
    #
    # The possible positive answers
    #
    ---
    # The program must ignore the case of letters.
    - - y
    - - Y
    # The user can put a point
    - - y.
    - - Y.
    # An exclamation mark is also allowed.
    - - y!
    - - Y!
    # The program must ignore leading spaces.
    - - "   Yes"
    # As well ignore trailing spaces.
    - - "Yes   "
    # All of the following expressions are valid answers.
    - - yes
    - - Yes
    - - YES
    - - yes.
    - - Yes!
    - - YES!
    - - yES!
    - - YeS
    - - Yeah
    - - yeah
    - - Yeah!
    - - YeAh.
    - - YEAH
    - - yep
    - - yEp
    - - Yep!
    - - YEP.
    - - sure
    - - Sure!
    - - SURE!
    - - surE.
    - - right
    - - Right.
    - - Right!
    - - affirmative
    - - Affirmative!
    - - correct
    - - correct.
    - - indeed
    - - you bet
    - - exactly
    - - you said it.
    - - you said it!
    - - you said it
  learner_created: false
- name: test/positive-answers.script.yaml
  visible: false
  text: |+
    #
    # This is a script to test the correct interpretation of negative responses.
    #
    ---
    - [start]
    - [input, cat]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it a cat?", "The program should ask: \"Is it a cat?\""]
    #
    # Here we substitute all values from the data file
    #
    - [input, "{0}"]
    - - not contains
      - "yes or no"
      - "The answer \"{0}\" should be treated as correct positive."

  learner_created: false
- name: test/Scenario.java
  visible: false
  text: |-
    import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.io.File;
    import java.io.IOException;
    import java.util.Map;
    import java.util.function.Predicate;
    import java.util.regex.Pattern;

    import static java.text.MessageFormat.format;
    import static java.util.function.Predicate.not;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class Scenario {
        private TestedProgram main;
        private String output = "";
        private final File dataFile;
        private final File scriptFile;

        Scenario(String name) {
            dataFile = new File("test/" + name + ".data.yaml");
            scriptFile = new File("test/" + name + ".script.yaml");
            System.out.println("Scenario '" + name + "' is started.");
            System.out.println();
        }

        CheckResult check() {

            final Object[][] data;
            final String[][] script;

            try {
                data = new YAMLMapper().readValue(dataFile, String[][].class);
                script = new YAMLMapper().readValue(scriptFile, String[][].class);
            } catch (IOException e) {
                e.printStackTrace();
                return wrong("Cannot find the files "
                        + dataFile.getName()
                        + " or "
                        + scriptFile.getName()
                        + ", looks like you deleted or renamed it. Please, revert the changes.");
            }

            for (var values : data) {
                for (var action : script) {
                    final var command = action[0];
                    switch (command) {
                        case "start":
                            main = new TestedProgram();
                            output = action.length == 1
                                    ? main.start()
                                    : main.start(format(action[1], values).split(" "));
                            output = output.trim();
                            continue;
                        case "input":
                            output = main.execute(format(action[1], values)).trim();
                            continue;
                        case "finish":
                            if (main.isFinished()) {
                                continue;
                            }
                            return wrong(format(action[1], values));
                        default:
                            final Map<String, Predicate<String>> validation = Map.of(
                                    "contains", output::contains,
                                    "not contains", not(output::contains),
                                    "file exists", file -> new File(file).exists(),
                                    "file delete", file -> new File(file).delete(),
                                    "find", pattern -> Pattern.compile(pattern).matcher(output).find(),
                                    "matches", output::matches);

                            final var expected = format(action[1], values);
                            if (validation.get(command).test(expected)) {
                                continue;
                            }
                            final var feedback = format(action[2], values) + System.lineSeparator()
                                    + "Expected " + command + ": \"" + expected + "\"" + System.lineSeparator()
                                    + "Actual data is: \"" + output + "\".";
                            return wrong(feedback);
                    }
                }
            }
            return correct();
        }

    }
  learner_created: false
- name: test/the-first-question.data.yaml
  visible: false
  text: |-
    ---
    - [cat, a cat]
    - [DOG, a dog]
    - [hare, a hare]
    - [WOLF, a wolf]
    - [uniCorn, an unicorn]
    - [uniCorn, an unicorn]
    - [A Unicorn, a unicorn]
    - [APE, an ape]
    - [uniCorn, an unicorn]
    - [uniCorn, an unicorn]
    - [linX, a linx]
  learner_created: false
- name: test/the-first-question.script.yaml
  visible: false
  text: |-
    #
    # This is a script to test the generation of the first question.
    #
    ---
    - [start]
    - [input, "{0}"]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it {1}?", "The program should ask: \"Is it {1}?\""]
  learner_created: false
- name: test/unclear-answers.data.yaml
  visible: false
  text: |-
    #
    # All of the following expressions should be treated as unclear
    #
    ---
    - - y..
    - - Y!.
    - - ye
    - - jes
    - - Jes
    - - yes...
    - - да
    - - Так
    - - yes, yes
    - - Yea
    - - Ja
    - - Jawohl!
    - - ja natürlich!
    - - so genau
    - - 1
    - - +
    - - yepi
    - - Yep!!
    - - Yes, sure!
    - - Ok
    - - Rights
    - - affErmative
    - - n..
    - - N!!
    - - nea
    - - nop
    - - noppi
    - - no wa
    - - no way!!!
    - - na
    - - nahi
    - - nega
    - - negat
    - - negati
    - - negativ
    - - i don't think..
    - - i don't
    - - i
    - - I no
    - - i don't think so...
    - -
  learner_created: false
- name: test/unclear-answers.script.yaml
  visible: false
  text: |
    #
    # This is a script to test the interpretation of unclear responses.
    #
    ---
    - [start]
    - [input, cat]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it a cat?", "The program should ask: \"Is it a cat?\""]
    #
    # Here we substitute all values from the data file
    #
    - [input, "{0}"]
    - - contains
      - "yes or no"
      - "The answer \"{0}\" is unclear and the program should ask again."
  learner_created: false
- name: src/animals/Node.java
  visible: true
  text: |
    package animals;

    import java.util.HashMap;

    public class Node {
        private String value;
        private Node left;
        private Node right;
        private final HashMap<String, Boolean> facts;

        public Node(String value) {
            this.value = value;
            this.left = null;
            this.right = null;
            this.facts = new HashMap<>();
        }

        public String getValue() {
            return value;
        }

        public void setValue(String value) {
            this.value = value;
        }

        public Node getLeft() {
            return left;
        }

        public void setLeft(Node left) {
            this.left = left;
        }

        public Node getRight() {
            return right;
        }

        public void setRight(Node right) {
            this.right = right;
        }

        public boolean getFact(String value) {
            return this.facts.get(value);
        }

        public void setFact(String fact, boolean isTrue) {
            this.facts.put(fact, isTrue);
        }

        public void copyFacts(Node otherAnimal) {
            for (String fact : otherAnimal.facts.keySet()) {
                this.setFact(fact, otherAnimal.getFact(fact));
            }
        }

        public String getFactAsString(String fact) {
            if (!this.facts.get(fact)) {
                fact = fact.replace("can", "can't")
                        .replace("has", "doesn't have")
                        .replace("is", "isn't");
            } else if (this.facts.get(fact) == null) {
                return "No information.";
            }
            return fact;
        }

        public boolean hasChildren() {
            return this.left != null && this.right != null;
        }
    }
  learner_created: true
- name: src/animals/BinaryTree.java
  visible: true
  text: |
    package animals;

    public class BinaryTree {
        private Node root;

        public BinaryTree(Node root) {
            this.root = root;
        }

        public Node getRoot() {
            return root;
        }

        private Node addRecursive(Node current, Node newNode) {
            if (current == null) {
                return newNode;
            }
            if (newNode.getFact(current.getValue())) {
                current.setRight(addRecursive(current.getRight(), newNode));
            } else {
                current.setLeft(addRecursive(current.getLeft(), newNode));
            }
            return current;
        }

        public void add(Node node) {
            root = addRecursive(root, node);
        }
    }
  learner_created: true
- name: src/animals/UI.java
  visible: true
  text: |
    package animals;

    import java.util.*;

    public class UI {
        private final HashMap<String, Animal> animals;
        private final Scanner scanner;
        private BinaryTree binaryTree;
        private final CommandProcessor cp;

        public UI() {
            this.animals = new HashMap<>();
            this.scanner = new Scanner(System.in);
            this.cp = new CommandProcessor();
        }

        public void start() {
            cp.greet();
            askForAnimal();
            playGame();
            cp.bye();
        }

        private void askForAnimal() {
            System.out.println("I want to learn about animals.");
            System.out.print("Which animal do you like most?\n> ");
            Animal favoriteAnimal = addAnimal(scanner.nextLine());
            System.out.println("Wonderful! I've learned so much about animals!");
            this.binaryTree = new BinaryTree(favoriteAnimal);
        }

        private void playGame() {
            System.out.println("Let's play a game!");

            while (true) {
                System.out.println("You think of an animal, and I guess it.");
                System.out.print("Press enter when you're ready.\n>");
                scanner.nextLine();

                Animal firstAnimal = findAnimal();

                System.out.printf("Is it %s?%n> ", firstAnimal.getValue());
                while (true) {
                    String answer = cp.processAnswer(scanner.nextLine());
                    if (answer.equals("no")) {
                        System.out.println("I give up. What animal do you have in mind?");
                        Animal newAnimal = addAnimal(scanner.nextLine());
                        newAnimal.copyFacts(firstAnimal);
                        getFact(firstAnimal, newAnimal);
                        break;
                    } else if (answer.equals("yes")) {
                        System.out.println("Nice! I've learned so much about animals!");
                        break;
                    } else {
                        cp.askYesOrNo();
                    }
                }
                System.out.println("Would you like to play again?");
                String answer = cp.processAnswer(scanner.nextLine());
                while (answer.equals("unknown answer")) {
                    cp.askYesOrNo();
                    answer = cp.processAnswer(scanner.nextLine());
                }
                if (answer.equals("no")) {
                    break;
                }
            }
        }

        private Animal findAnimal() {
            Node node = this.binaryTree.getRoot();
            while (true) {
                if (!node.hasChildren()) {
                    return (Animal) node;
                }
                System.out.println(cp.getQuestion(node.getValue()));
                while (true) {
                    String answer = cp.processAnswer(scanner.nextLine());
                    if (answer.equals("yes")) {
                        node = node.getRight();
                        break;
                    } else if (answer.equals("no")) {
                        node = node.getLeft();
                        break;
                    } else {
                        cp.askYesOrNo();
                    }
                }
            }
        }

        private void getFact(Node lastNode, Animal secondAnimal) {
            Animal firstAnimal = new Animal(lastNode.getValue());
            firstAnimal.copyFacts(lastNode);
            String fact;
            while (true) {
                System.out.printf("Specify a fact that distinguishes %s from %s.%n"
                        , firstAnimal.getValue(), secondAnimal.getValue());
                System.out.println("""
                        The sentence should satisfy one of the following templates:
                        - It can ...
                        - It has ...
                        - It is a/an ...""");
                System.out.print("\n> ");
                fact = scanner.nextLine().toLowerCase().trim().replaceAll("[?,.!]", "");
                if (!fact.matches("it (can|has|is) [\\w\\s]+")) {
                    System.out.println("The examples of a statement:\n - It can fly\n - It has horn\n - It is a mammal");
                    continue;
                }
                System.out.printf("Is the statement correct for %s?%n> ", secondAnimal.getValue());
                while (true) {
                    String answer = scanner.nextLine();
                    if (cp.processAnswer(answer).equals("yes")) {
                        secondAnimal.setFact(fact, true);
                        firstAnimal.setFact(fact, false);
                        break;
                    }
                    if (cp.processAnswer(answer).equals("no")) {
                        firstAnimal.setFact(fact, true);
                        secondAnimal.setFact(fact, false);
                        break;
                    }
                    cp.askYesOrNo();
                }
                break;
            }
            lastNode.setValue(fact);
            this.binaryTree.add(firstAnimal);
            this.binaryTree.add(secondAnimal);
            System.out.println("I have learned the following facts about animals:");
            System.out.println(" - " + firstAnimal.getFactAsString(fact));
            System.out.println(" - " + secondAnimal.getFactAsString(fact));
            System.out.println("I can distinguish these animals by asking the question:");
            System.out.println(" - " + cp.getQuestion(fact));
            System.out.println("Nice! I've learned so much about animals!");
            System.out.println();
        }

        private Animal addAnimal(String input) {
            String name = input.toLowerCase();
            String[] parts = name.split(" ");
            String article;

            if (parts.length != 1) {
                if (parts[0].matches("a|an")) {
                    Animal animal = new Animal(name);
                    this.animals.putIfAbsent(parts[1], animal);
                    return this.animals.get(parts[1]);
                } else if (parts[0].matches("the")) {
                    name = name.replace("the", "").trim();
                }
            }
            if (name.substring(0, 1).matches("[aeiouy]")) {
                article = "an";
            } else {
                article = "a";
            }
            Animal animal = new Animal(String.format("%s %s", article, name));
            this.animals.putIfAbsent(name, animal);
            return this.animals.get(name);
        }
    }
  learner_created: true
- name: src/animals/CommandProcessor.java
  visible: true
  text: |
    package animals;

    import java.time.LocalTime;
    import java.util.List;
    import java.util.Random;

    public class CommandProcessor {
        private final Random rnd;

        public CommandProcessor() {
            this.rnd = new Random();
        }

        public void greet() {
            LocalTime now = LocalTime.now();
            if (now.isAfter(LocalTime.of(5, 0)) && now.isBefore(LocalTime.NOON)) {
                System.out.println("Good morning");
            } else if (!now.isBefore(LocalTime.NOON) && now.isBefore(LocalTime.of(18, 0))) {
                System.out.println("Good afternoon");
            } else {
                System.out.println("Good evening");
            }
            System.out.println();
        }

        public void bye() {
            List<String> byeList = List.of("Goodbye!", "Bye!", "Have a nice day!"
                    , "See you soon!", "Nara mordeczko", "Out.");
            System.out.println();
            System.out.println(byeList.get(rnd.nextInt(byeList.size())));
        }

        public String processAnswer(String answer) {
            List<String> yes = List.of("y", "yes", "yeah", "yep", "sure", "right"
                    , "affirmative", "correct", "indeed", "you bet", "exactly", "you said it");
            List<String> no = List.of("n", "no", "no way", "nah", "nope", "negative", "i don't think so", "yeah no");

            if (answer.endsWith(".") || answer.endsWith("!")) {
                answer = answer.substring(0, answer.length() - 1);
            }

            if (yes.contains(answer.trim().toLowerCase())) {
                return "yes";
            } else if (no.contains(answer.trim().toLowerCase())) {
                return "no";
            } else {
                return "unknown answer";
            }
        }

        public void askYesOrNo() {
            List<String> yesOrNo = List.of(
                    "I'm not sure I caught you: was it yes or no?",
                    "Funny, I still don't understand, is it yes or no?",
                    "Oh, it's too complicated for me: just tell me yes or no.",
                    "Could you please simply say yes or no?",
                    "Oh, no, don't try to confuse me: say yes or no.");
            System.out.println(yesOrNo.get(rnd.nextInt(yesOrNo.size())));
        }

        public String getQuestion(String fact) {
            return fact.replace("it is", "Is it")
                    .replace("it can", "Can it")
                    .replace("it has", "Does it have") + "?";
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11082#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Thu, 22 Dec 2022 22:59:04 UTC"
record: 4
