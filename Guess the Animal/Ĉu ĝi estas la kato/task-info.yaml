type: edu
custom_name: Ĉu ĝi estas la kato?
files:
- name: src/animals/Main.java
  visible: true
  text: |
    package animals;

    public class Main {
    }
  learner_created: false
- name: test/en.data.yaml
  visible: false
  text: |-
    ---
    - - yaml
    - - json
    - - xml
  learner_created: false
- name: test/en.script.yaml
  visible: false
  text: |+
    #
    # There is a scenario of parameterized test for English language.
    #
    ---
    - [start, "-type {0}"] # We will test three different file formats: JSON, YAML, XML
    - - contains
      - which animal
      - When no Knwoledge Tree is created yet the program should ask for a favourite animals at first.
    - [input, cat]
    - - contains
      - welcome to the animal
      - After entering the favourite animal the program should welcom the user and represent itself as an expert system

    #
    # Start the menu
    #
    - - matches
      - "(?si).*play.*list.*search.*stat.*print.*exit.*"
      - The program should display the menu

    #
    # Let's play the game!
    #
    - [input, 1]
    - - contains
      - you think of an animal, and i guess it.
      - The program should asks the user to think of an animal
    - - contains
      - press enter
      - The computer should make a pause before the game.
    - [input, ""]

    #
    # After user press Enter the game started!
    #
    - - contains
      - is it a cat?
      - The very first question in the very first game should undoubtedly be about a beloved animal.
    - [input, No] # We think of about other animal, not about the cat
    - - contains
      - i give up
      - If the program cannot guess the animal, it must give up.
    - [input, dog] # Of course, our second animal is a dog!
    - - contains
      - distinguishes
      - The program should find out how one animal differs from another.
    - - input
      - it can climb trees
    - - find
      - is .+ correct for a dog?
      - The program should clarify if the statement is correct for a dog.
    - [input, no]

    - - contains
      - "cat can climb trees"
      - The program must generate the correct fact for the first animal.

    - - contains
      - "the dog "
      - The program must generate the correct fact for the second animal.

    - - matches
      - "(?is).*(again|repeat|one more).*"
      - The program should ask the user to play again
    - [input, yes] # Yes, we will play once again
    - [input, ""] # Press ENTER
    - - contains
      - can it climb trees?
      - After the first game, the starting question should be the question of fact.
    - [input, yes]
    - [contains, "is it a cat?", "The program must assume that the animal is a cat."]
    - - input
      - |
        no
        lynx
        it is living in the forest
        yes
        no
    # We finish the game.

    - - matches
      - "(?si).*play.*list.*search.*stat.*print.*exit.*"
      - The program should display the menu

    - [input, "0"] # Exit from the application
    - - matches
      - "(?si).*(bye|later|soon|off|see|!).*"
      - How about to say goodbye to the user?
    - [finish, "The program should finish when user exit"]
    - - file exists
      - "animals.{0}"
      - "The program should save knowledge tree to animals.{0} file."
    #
    # After the first session the program created and save the Knowledge Tree
    # We will run the program again to make sure that all data was saved and restored correctly.
    #
    - [start, "-type {0}"]
    - - not contains
      - which animal do you like most?
      - If the tree of knowledge exists, then the program should not ask the user about his favorite animal.
    - - find
      - welcome to the animal(.s)? expert system
      - The program should immediately greet the user after starting.
    #
    # Start the menu
    #
    - - matches
      - "(?si).*play.*list.*search.*stat.*print.*exit.*"
      - The program should display the menu

    #
    # Let's check which animals are now in our knowledge tree.
    #
    - [input, "2"]
    - - matches
      - (?si).*cat.*dog.*lynx.*
      - The program should print a list of all animals in alphabetical order.

    #
    # Check the facts about the animal
    #
    - [input, "3"]
    - - find
      - enter.* animal
      - The program should ask the user to enter the name of the animal
    - [input, lynx]
    - - contains
      - facts about the lynx
      - The program must find the animal that is in the knowledge tree.
    - - contains
      - it can climb trees
      - The program did not print the first fact about the animal
    - - contains
      - it is living in the forest
      - The program did not print the second fact about the animal

    #
    # Check the knowledge tree statistics
    #
    - [input, "4"]
    - [contains, "knowledge tree", "The header for the table must be printed"]

    - - find
      - (?i)root node.*It can climb trees
      - The root element in our tree must be a statement

    - - find
      - number of nodes.*\b5\b
      - The total number of nodes in the tree is not counted correctly.

    - - find
      - number of animals\D*3\b
      - The total number of animals in the tree is not counted correctly.

    - - find
      - number of statements\D*2\b
      - The total number of animals in the tree is not counted correctly.

    - - find
      - height of the tree\D*2\b
      - The tree depth was calculated incorrectly.

    - - find
      - minimum\D*1\b
      - The minimum tree depth was calculated incorrectly.

    - - find
      - average\D*1[,.]7
      - The average tree depth was calculated incorrectly.

    - [input, "0"] # Exit from the application
    - [finish, "The program should finish when user exit"]
    - - file delete
      - "animals.{0}"
      - "The test can't delete animals.{0} file."


  learner_created: false
- name: test/eo.data.yaml
  visible: false
  text: |-
    ---
    - - yaml
    - - json
    - - xml
  learner_created: false
- name: test/eo.script.yaml
  visible: false
  text: |+
    #
    # There is a scenario of parameterized test for Esperanto language.
    #
    ---
    - [start, "-type {0}"] # We will test three different file formats: JSON, YAML, XML
    - - contains
      - "kiun beston vi plej ŝatas?"
      - "[Esperanto] When no Knowledge Tree is created yet the program should ask for a favourite animals at first."
    - [input, kato]
    - - contains
      - bonvenon al la sperta sistemo de la besto!
      - "[Esperanto] After entering the favourite animal the program should welcome the user and represent itself as an expert system"

    #
    # Start the menu
    #
    - - matches
      - (?si).*Ludi.*Listo.*Serĉi.*Kalkuli.*Eliri.*
      - "[Esperanto] The program should display the menu"

    #
    # Let's play the game!
    #
    - [input, 1]
    - - contains
      - vi pensu pri besto, kaj mi divenos ĝin.
      - "[Esperanto] The program should asks the user to think of an animal"
    - - contains
      - premu enen kiam vi pretas.
      - "[Esperanto] The computer should make a pause before the game."
    - [input, ""]

    #
    # After user press Enter the game started!
    #
    - - contains
      - ĉu ĝi estas kato?
      - "[Esperanto] The very first question in the very first game should undoubtedly be about a beloved animal."
    - [input, ne] # We think of about other animal, not about the cat
    - - contains
      - mi rezignas. kiun beston vi havas en la kapo?
      - "[Esperanto] If the program cannot guess the animal, it must give up."
    - [input, hundo] # Of course, our second animal is a dog!
    - - contains
      - indiku fakton, kiu distingas kato de hundo
      - "[Esperanto] The program should find out how one animal differs from another."
    - - input
      - ĝi povas surgrimpi arbon
    - - contains
      - ĉu la aserto ĝustas por la hundo?
      - "[Esperanto] The program should clarify if the statement is correct for a dog."
    - [input, ne]

    - - contains
      - la kato povas surgrimpi arbon
      - The program must generate the correct fact for the first animal.

    - - contains
      - la hundo ne povas surgrimpi arbon
      - "[Esperanto] The program must generate the correct fact for the second animal."

    - - matches
      - "(?is).*(denove|ripeti|ankoraŭ).*"
      - "[Esperanto] The program should ask the user to play again"
    - [input, jes] # Yes, we will play once again
    - [input, ""] # Press ENTER
    - - contains
      - povas surgrimpi arbon?
      - "[Esperanto] After the first game, the starting question should be the question of fact."
    - [input, jes]
    - [contains, "ĉu ĝi estas kato?", "[Esperanto] The program must assume that the animal is a cat."]
    - - input
      - |
        ne
        linko
        ĝi loĝas en la arbaro
        jes
        ne
    # We finish the game.
    - - matches
      - (?si).*Ludi.*Listo.*Serĉi.*Kalkuli.*Eliri.*
      - "[Esperanto] The program should display the menu"
    - [input, "0"] # Exit from the application
    - - matches
      - "(?si).*(ĝis|estis).*"
      - "[Esperanto] How about to say goodbye to the user?"
    - [finish, "The program should finish when user exit"]
    - - file exists
      - "animals_eo.{0}"
      - "The program should save knowledge tree to animals_eo.{0} file."
    #
    # After the first session the program created and save the Knowledge Tree
    # We will run the program again to make sure that all data was saved and restored correctly.
    #
    - [start, "-type {0}"]
    - - not contains
      - kiun beston vi plej ŝatas?
      - "[Esperanto] If the tree of knowledge exists, then the program should not ask the user about his favorite animal."
    - - contains
      - bonvenon al la sperta sistemo de la besto!
      - "[Esperanto] The program should immediately greet the user after starting."
    - - matches
      - (?si).*Ludi.*Listo.*Serĉi.*Kalkuli.*Eliri.*
      - "[Esperanto] The program should display the menu"

    #
    # Let's check which animals are now in our knowledge tree.
    #
    - [input, "2"]
    - - matches
      - (?si).*hundo.*kato.*linko.*
      - "[Esperanto] The program should print a list of all animals in alphabetical order."

    #
    # Check the facts about the animal
    #
    - [input, "3"]
    - - find
      - enigu .* besto
      - "[Esperanto] The program should ask the user to enter the name of the animal"
    - [input, linko]
    - - contains
      - faktoj pri la linko
      - "[Esperanto] The program must find the animal that is in the knowledge tree."
    - - contains
      - ĝi povas surgrimpi arbon
      - "[Esperanto] The program did not print the first fact about the animal"
    - - contains
      - ĝi loĝas en la arbaro
      - "[Esperanto] The program did not print the second fact about the animal"

    #
    # Check the knowledge tree statistics
    #
    - [input, "4"]
    - [contains, "la statistiko", "The header for the table must be printed"]

    - - matches
      - (?is).*radika nodo.*povas surgrimpi arbon.*
      - "[Esperanto] The root element in our tree must be a statement"

    - - matches
      - (?is).*nombro de nodoj[^\\R]*5.*
      - "[Esperanto] The total number of nodes in the tree is not counted correctly."

    - - matches
      - (?is).*nombro de bestoj[^\\R]*3.*
      - "[Esperanto] The total number of animals in the tree is not counted correctly."

    - - matches
      - (?is).*nombro de deklaroj[^\\R]*2.*
      - "[Esperanto] The total number of animals in the tree is not counted correctly."

    - - matches
      - (?is).*alteco de la arbo[^\\R]*2.*
      - "[Esperanto] The tree depth was calculated incorrectly."

    - - matches
      - (?is).*minimuma profundo[^\\R]*1.*
      - "[Esperanto] The minimum tree depth was calculated incorrectly."

    - - matches
      - (?is).*averaĝa profundo[^\\R]*1[,.]7.*
      - "[Esperanto] The average tree depth was calculated incorrectly."

    - [input, "0"] # Exit from the application
    - [finish, "The program should finish when user exit"]
    - - file delete
      - "animals_eo.{0}"
      - "[Esperanto] The test can't delete animals_eo.{0} file."


  learner_created: false
- name: test/GuessAnimalTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.io.File;
    import java.io.IOException;
    import java.util.Locale;
    import java.util.stream.Stream;

    public class GuessAnimalTest extends StageTest<String> {

        String[] languages = new String[]{"en", "eo"};

        @DynamicTest(data = "languages")
        CheckResult testLanguages(final String language) throws IOException {
            final var fileName = "animals" + ("en".equals(language) ? "." : "_" + language + ".");

            final var locale = Locale.getDefault();
            final var systemLanguage = System.getProperty("user.language");
            Locale.setDefault(new Locale(language));
            System.setProperty("user.language", language);

            deleteFiles(fileName);
            final var result = new Scenario(language).check();
            deleteFiles(fileName);

            Locale.setDefault(locale);
            System.setProperty("user.language", systemLanguage);

            return result;
        }

        private void deleteFiles(String fileName) {
            Stream.of("yaml", "json", "xml")
                    .map(fileName::concat)
                    .map(File::new)
                    .filter(File::exists)
                    .forEach(File::delete);
        }
    }
  learner_created: false
- name: test/Scenario.java
  visible: false
  text: |-
    import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.io.File;
    import java.io.IOException;
    import java.util.Map;
    import java.util.function.Predicate;
    import java.util.regex.Pattern;

    import static java.text.MessageFormat.format;
    import static java.util.function.Predicate.not;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class Scenario {
        private TestedProgram main;
        private String output = "";
        private final File dataFile;
        private final File scriptFile;

        Scenario(String name) {
            dataFile = new File("test/" + name + ".data.yaml");
            scriptFile = new File("test/" + name + ".script.yaml");
            System.out.println("Scenario '" + name + "' is started.");
            System.out.println();
        }

        CheckResult check() {

            final Object[][] data;
            final String[][] script;

            try {
                data = new YAMLMapper().readValue(dataFile, String[][].class);
                script = new YAMLMapper().readValue(scriptFile, String[][].class);
            } catch (IOException e) {
                e.printStackTrace();
                return wrong("Cannot find the files "
                        + dataFile.getName()
                        + " or "
                        + scriptFile.getName()
                        + ", looks like you deleted or renamed it. Please, revert the changes.");
            }

            for (var values : data) {
                for (var action : script) {
                    final var command = action[0];
                    switch (command) {
                        case "start":
                            main = new TestedProgram();
                            output = action.length == 1
                                    ? main.start()
                                    : main.start(format(action[1], values).split(" "));
                            output = output.trim().toLowerCase();
                            continue;
                        case "input":
                            output = main.execute(format(action[1], values)).trim().toLowerCase();
                            continue;
                        case "finish":
                            if (main.isFinished()) {
                                continue;
                            }
                            return wrong(format(action[1], values));
                        default:
                            final Map<String, Predicate<String>> validation = Map.of(
                                    "contains", output::contains,
                                    "not contains", not(output::contains),
                                    "file exists", file -> new File(file).exists(),
                                    "file delete", file -> new File(file).delete(),
                                    "find", pattern -> Pattern.compile(pattern).matcher(output).find(),
                                    "matches", output::matches);

                            final var expected = format(action[1], values);
                            if (validation.get(command).test(expected)) {
                                continue;
                            }
                            final var feedback = format(action[2], values) + System.lineSeparator()
                                    + "Expected " + command + ": \"" + expected + "\"" + System.lineSeparator()
                                    + "Actual data is: \"" + output + "\".";
                            return wrong(feedback);
                    }
                }
            }
            return correct();
        }

    }
  learner_created: false
- name: src/animals/Node.java
  visible: true
  text: |
    package animals;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonInclude;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    public class Node {
        private String value;
        private Node parent;
        private Node left;
        private Node right;

        public Node() {
        }

        public Node(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        public void setValue(String value) {
            this.value = value;
        }

        @JsonIgnore
        public Node getParent() {
            return parent;
        }

        public Node getLeft() {
            return left;
        }

        public void setLeft(Node left) {
            this.left = left;
            this.left.parent = this;
        }

        public Node getRight() {
            return right;
        }

        public void setRight(Node right) {
            this.right = right;
            this.right.parent = this;
        }

        @JsonIgnore
        public int getNodeDepth () {
            return this.getNodeDepth(this, 0);
        }

        @JsonIgnore
        private int getNodeDepth (Node current, int depth) {
            if (current.getParent() == null) {
                return depth;
            }
            return getNodeDepth(current.getParent(), ++depth);
        }

        @JsonIgnore
        public String getNameWithoutArticle() {
            return this.getValue().substring(2).trim();
        }

        @JsonIgnore
        public boolean hasChildren() {
            return this.left != null && this.right != null;
        }
    }
  learner_created: true
- name: src/animals/BinaryTree.java
  visible: true
  text: |
    package animals;

    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.List;

    public record BinaryTree(Node root) {

        public List<String> getLeafsValues() {
            List<String> values = new ArrayList<>();
            List<Node> leafs = getLeafs();
            for (Node leaf : leafs) {
                values.add(leaf.getNameWithoutArticle());
            }
            Collections.sort(values);
            return values;
        }

        public Node findNode(String value) {
            for (Node node : getLeafs()) {
                if (node.getValue().equals(value)) {
                    return node;
                }
            }
            return null;
        }

        public List<Node> getNodes() {
            List<Node> nodes = new ArrayList<>();
            getNodes(root, nodes);
            return nodes;
        }

        public List<Node> getLeafs() {
            List<Node> leafs = new ArrayList<>();
            getLeafs(root, leafs);
            return leafs;
        }

    //    public void print(Node current) {
    //        if (current == null) return;
    //        if (current == root) {
    //            System.out.printf("└ %s%n", getQuestion(root().getValue()));
    //        }
    //
    //    }

        private void getNodes(Node current, List<Node> nodes) {
            if (current == null) return;
            nodes.add(current);
            getNodes(current.getLeft(), nodes);
            getNodes(current.getRight(), nodes);
        }

        private void getLeafs(Node current, List<Node> leafs) {
            if (current == null) {
                return;
            }
            if (!current.hasChildren()) {
                leafs.add(current);
            }
            getLeafs(current.getLeft(), leafs);
            getLeafs(current.getRight(), leafs);
        }
    }
  learner_created: true
- name: src/animals/UI.java
  visible: true
  text: |
    package animals;

    import com.fasterxml.jackson.databind.ObjectMapper;

    import java.io.File;
    import java.util.*;

    public class UI {
        private final Scanner scanner;
        private BinaryTree binaryTree;
        private final CommandProcessor cp;
        private final String fileName;
        private final ObjectMapper objectMapper;

        public UI(String fileExt, ObjectMapper objectMapper) {
            this.fileName = String.format("animals.%s", fileExt);
            this.scanner = new Scanner(System.in);
            this.cp = new CommandProcessor();
            this.objectMapper = objectMapper;
        }

        public void start() {
            cp.greet();
            tryToLoadFile();
            showMenu();
            cp.bye();
        }

        private void showMenu() {
            while (true) {
                System.out.println("What do you want to do:\n");
                System.out.print("""
                    1. Play the guessing game
                    2. List of all animals
                    3. Search for an animal
                    4. Calculate statistics
                    5. Print the Knowledge Tree
                    0. Exit
                    >\s""");
                String input = scanner.nextLine();
                if (input.equals("0")) {
                    break;
                } else if (input.equals("1")) {
                    playGame();
                } else if (input.equals("2")) {
                    listAnimals();
                } else if (input.equals("3")) {
                    searchForAnimal();
                } else if (input.equals("4")) {
                    cp.printTreeStats(this.binaryTree);
                } else if (input.equals("5")) {
                    this.cp.printTree(this.binaryTree);
                }
            }

        }

        private void searchForAnimal() {
            System.out.print("Enter the animal:\n> ");
            String searchedAnimal = cp.getAnimalName(scanner.nextLine());
            Node animal = binaryTree.findNode(searchedAnimal);
            if (animal == null) {
                System.out.printf("No facts about the %s.%n", searchedAnimal.substring(2).trim());
            } else {
                cp.printFacts(animal);
            }
        }

        private void listAnimals() {
            System.out.println("Here are the animals I know:");
            for (String animal : binaryTree.getLeafsValues()) {
                System.out.printf(" - %s%n", animal);
            }
        }

        private void tryToLoadFile() {
            try {
                Node root = objectMapper.readValue(new File(fileName), Node.class);
                this.binaryTree = new BinaryTree(root);
            } catch (Exception e) {
                System.out.println(e.getMessage());
                askForAnimal();
            }
            System.out.println("Welcome to the animal expert system!\n");
        }

        private void askForAnimal() {
            System.out.println("I want to learn about animals.");
            System.out.print("Which animal do you like most?\n> ");
            Node favoriteAnimal = getAnimal(scanner.nextLine());
            System.out.println();
            this.binaryTree = new BinaryTree(favoriteAnimal);
        }

        private void playGame() {
            System.out.println("Let's play a game!");

            while (true) {
                System.out.println("You think of an animal, and I guess it.");
                System.out.print("Press enter when you're ready.\n>");
                scanner.nextLine();

                Node firstAnimal = findAnimal();

                System.out.printf("Is it %s?%n> ", firstAnimal.getValue());
                while (true) {
                    String answer = cp.processAnswer(scanner.nextLine());
                    if (answer.equals("no")) {
                        System.out.println("I give up. What animal do you have in mind?");
                        Node newAnimal = getAnimal(scanner.nextLine());
                        getFact(firstAnimal, newAnimal);
                        break;
                    } else if (answer.equals("yes")) {
                        System.out.println("Nice! I've learned so much about animals!");
                        break;
                    } else {
                        cp.askYesOrNo();
                    }
                }
                System.out.println("Would you like to play again?");
                String answer = cp.processAnswer(scanner.nextLine());
                while (answer.equals("unknown answer")) {
                    cp.askYesOrNo();
                    answer = cp.processAnswer(scanner.nextLine());
                }
                if (answer.equals("no")) {
                    try {
                        objectMapper
                                .writerWithDefaultPrettyPrinter()
                                .writeValue(new File(fileName), this.binaryTree.root());
                    } catch (Exception e) {
                        System.out.println(e.getMessage());
                    }
                    break;
                }
            }
        }

        private Node findAnimal() {
            Node node = this.binaryTree.root();
            while (true) {
                if (!node.hasChildren()) {
                    return node;
                }
                System.out.println(cp.getQuestion(node.getValue()));
                while (true) {
                    String answer = cp.processAnswer(scanner.nextLine());
                    if (answer.equals("yes")) {
                        node = node.getRight();
                        break;
                    } else if (answer.equals("no")) {
                        node = node.getLeft();
                        break;
                    } else {
                        cp.askYesOrNo();
                    }
                }
            }
        }

        private void getFact(Node lastNode, Node secondAnimal) {
            Node firstAnimal = new Node(lastNode.getValue());
            String fact;
            while (true) {
                System.out.printf("Specify a fact that distinguishes %s from %s.%n"
                        , firstAnimal.getValue(), secondAnimal.getValue());
                System.out.println("""
                        The sentence should satisfy one of the following templates:
                        - It can ...
                        - It has ...
                        - It is a/an ...""");
                System.out.print("\n> ");
                fact = scanner.nextLine().toLowerCase().trim().replaceAll("[?,.!]", "");
                if (!fact.matches("it (can|has|is) [\\w\\s]+")) {
                    System.out.println("The examples of a statement:\n - It can fly\n - It has horn\n - It is a mammal");
                    continue;
                }

                lastNode.setValue(fact);

                System.out.printf("Is the statement correct for %s?%n> ", secondAnimal.getValue());
                while (true) {
                    String answer = scanner.nextLine();
                    if (cp.processAnswer(answer).equals("yes")) {
                        lastNode.setRight(secondAnimal);
                        lastNode.setLeft(firstAnimal);
                        break;
                    }
                    if (cp.processAnswer(answer).equals("no")) {
                        lastNode.setRight(firstAnimal);
                        lastNode.setLeft(secondAnimal);
                        break;
                    }
                    cp.askYesOrNo();
                }
                break;
            }
            System.out.println("I have learned the following facts about animals:");
            System.out.println(cp.getFact(lastNode, firstAnimal));
            System.out.println(cp.getFact(lastNode, secondAnimal));
            System.out.println("I can distinguish these animals by asking the question:");
            System.out.println(" - " + cp.getQuestion(fact));
            System.out.println("Nice! I've learned so much about animals!");
            System.out.println();
        }

        public Node getAnimal(String input) {
            return new Node(cp.getAnimalName(input));
        }
    }
  learner_created: true
- name: src/animals/TreeStatistics.java
  visible: true
  text: |
    package animals;

    import java.util.Arrays;
    import java.util.List;

    public class TreeStatistics {
        private final BinaryTree tree;
        private final int[] leafDepths;
        private final int numberOfLeafs;
        private final int numberOfNodes;

        public TreeStatistics(BinaryTree tree) {
            this.tree = tree;
            this.leafDepths = getLeafsDepths();
            this.numberOfLeafs = this.tree.getLeafs().size();
            this.numberOfNodes = this.tree.getNodes().size();
        }

        public String getRootValue() {
            return this.tree.root().getValue();
        }

        public int getNumberOfLeafs() {
            return this.numberOfLeafs;
        }

        public int getNumberOfNodes() {
            return this.numberOfNodes;
        }

        public int getNumberOfParentNodes() {
            return this.numberOfNodes - this.numberOfLeafs;
        }

        public int getHeight() {
            int max = 0;
            for (int depth : this.leafDepths) {
                if (depth > max) {
                    max = depth;
                }
            }
            return max;
        }

        public int minimumDepth() {
            int min = Integer.MAX_VALUE;
            for (int depth : this.leafDepths) {
                if (depth < min) {
                    min = depth;
                }
            }
            return min;
        }

        public double avgDepth() {
            return Arrays.stream(this.leafDepths).average().getAsDouble();
        }

        private int[] getLeafsDepths() {
            List<Node> leafs = this.tree.getLeafs();
            int[] depths = new int[leafs.size()];
            for (int i = 0; i < leafs.size(); i++) {
                depths[i] = leafs.get(i).getNodeDepth();
            }
            return depths;
        }
    }
  learner_created: true
- name: src/animals/CommandProcessor.java
  visible: true
  text: |
    package animals;

    import java.time.LocalTime;
    import java.util.List;
    import java.util.Random;

    public class CommandProcessor {
        private final Random rnd;

        public CommandProcessor() {
            this.rnd = new Random();
        }

        public void greet() {
            LocalTime now = LocalTime.now();
            if (now.isAfter(LocalTime.of(5, 0)) && now.isBefore(LocalTime.NOON)) {
                System.out.println("Good morning");
            } else if (!now.isBefore(LocalTime.NOON) && now.isBefore(LocalTime.of(18, 0))) {
                System.out.println("Good afternoon");
            } else {
                System.out.println("Good evening");
            }
            System.out.println();
        }

        public void bye() {
            List<String> byeList = List.of("Goodbye!", "Bye!", "Have a nice day!"
                    , "See you soon!", "Nara mordeczko", "Out.");
            System.out.println();
            System.out.println(byeList.get(rnd.nextInt(byeList.size())));
        }

        public String processAnswer(String answer) {
            List<String> yes = List.of("y", "yes", "yeah", "yep", "sure", "right"
                    , "affirmative", "correct", "indeed", "you bet", "exactly", "you said it");
            List<String> no = List.of("n", "no", "no way", "nah", "nope", "negative", "i don't think so", "yeah no");

            if (answer.endsWith(".") || answer.endsWith("!")) {
                answer = answer.substring(0, answer.length() - 1);
            }

            if (yes.contains(answer.trim().toLowerCase())) {
                return "yes";
            } else if (no.contains(answer.trim().toLowerCase())) {
                return "no";
            } else {
                return "unknown answer";
            }
        }

        public void askYesOrNo() {
            List<String> yesOrNo = List.of(
                    "I'm not sure I caught you: was it yes or no?",
                    "Funny, I still don't understand, is it yes or no?",
                    "Oh, it's too complicated for me: just tell me yes or no.",
                    "Could you please simply say yes or no?",
                    "Oh, no, don't try to confuse me: say yes or no.");
            System.out.println(yesOrNo.get(rnd.nextInt(yesOrNo.size())));
        }

        public String getQuestion(String fact) {
            return fact.replace("it is", "Is it")
                    .replace("it can", "Can it")
                    .replace("it has", "Does it have") + "?";
        }

        public String getFact(Node parentNode, Node animal) {
            return this.getFact(parentNode, animal, animal);
        }

        public String getFact(Node parentNode, Node children, Node animal) {
            String fact;
            if (parentNode.getLeft() == children) {
                fact = parentNode.getValue().replace("can", "can't")
                        .replace("has", "doesn't have")
                        .replace("is", "isn't");
            } else {
                fact = parentNode.getValue();
            }
            return String.format("The %s%s.", animal.getNameWithoutArticle(), fact.replaceFirst("it", ""));
        }

        public String getAnimalName(String input) {
            String name = input.toLowerCase();
            String[] parts = name.split(" ");
            String article;

            if (parts.length != 1) {
                if (parts[0].matches("a|an")) {
                    return name;
                } else if (parts[0].matches("the")) {
                    name = name.replace("the", "").trim();
                }
            }
            if (name.substring(0, 1).matches("[aeiouy]")) {
                article = "an";
            } else {
                article = "a";
            }
            return String.format("%s %s", article, name);
        }

        public void printFacts(Node animal) {
            System.out.printf("Facts about the %s:%n", animal.getNameWithoutArticle());
            printFact(animal, animal);
        }

        private void printFact(Node current, Node animal) {
            if (current.getParent() == null) {
                return;
            }
            printFact(current.getParent(), animal);
            System.out.printf(" - %s%n", getFact(current.getParent(), current, animal));
        }

        public void printTreeStats(BinaryTree binaryTree) {
            TreeStatistics tree = new TreeStatistics(binaryTree);
            System.out.println("The Knowledge Tree stats\n");
            System.out.printf("- root node                    %s%n", tree.getRootValue());
            System.out.printf("- total number of nodes        %s%n", tree.getNumberOfNodes());
            System.out.printf("- total number of animals      %s%n", tree.getNumberOfLeafs());
            System.out.printf("- total number of statements   %s%n", tree.getNumberOfParentNodes());
            System.out.printf("- height of the tree           %s%n", tree.getHeight());
            System.out.printf("- minimum animal's depth       %s%n", tree.minimumDepth());
            System.out.printf("- average animal's depth       %s%n", tree.avgDepth());
        }

        public void printTree(BinaryTree tree) {
            System.out.println();
            printNodes(tree.root(), "", 0);
        }

        private void printNodes(Node current, String branch, int depth) {
            if (current == null) return;
            String value = current.hasChildren() ? getQuestion(current.getValue()) : current.getValue();
            String newBranch = branch(current, branch, depth);
            System.out.printf("%s%s%n", newBranch, value);
            printNodes(current.getRight(), newBranch, current.getNodeDepth());
            printNodes(current.getLeft(), newBranch, current.getNodeDepth());
        }

        private String branch(Node current, String oldBranch, int oldDepth) {
            if (current.getParent() == null) {
                return " └ ";
            }
            int depth = current.getNodeDepth();
            if (depth > oldDepth) {
                oldBranch = oldBranch.replaceAll("├", "│").replaceAll("└", " ")
                        .substring(0, oldBranch.length());
            } else if (depth == oldDepth) {
                oldBranch = oldBranch.substring(0, oldBranch.length() - 1);
            } else {
                oldBranch = oldBranch.substring(0, oldBranch.length() - 2);
            }
    //        if (oldBranch.endsWith("└")) {
    //            oldBranch = oldBranch.substring(0, oldBranch.length());
    //        }
            StringBuilder branch = new StringBuilder(oldBranch);

            if (current.getParent().getRight() == current) {
                branch.append("├ ");
            } else {
                branch.append("└ ");
            }
            return branch.toString();
        }
    }
  learner_created: true
- name: src/main/resources/patterns_eo.properties
  visible: true
  learner_created: true
- name: src/main/resources/messages.properties
  visible: true
  learner_created: true
- name: src/main/resources/patterns.properties
  visible: true
  learner_created: true
- name: src/main/resources/messages_eo.properties
  visible: true
  learner_created: true
- name: src/main/resources/application.xml
  visible: true
  learner_created: true
- name: src/animals/MessagesProcessor.java
  visible: true
  learner_created: true
- name: animals.yaml
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11084#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: "Fri, 30 Dec 2022 08:03:45 UTC"
record: -1
