type: edu
files:
- name: src/animals/Main.java
  visible: true
  text: |
    package animals;

    public class Main {
    }
  learner_created: false
- name: test/file-formats.data.yaml
  visible: false
  text: |-
    ---
    - - json
    - - xml
    - - yaml
  learner_created: false
- name: test/file-formats.script.yaml
  visible: false
  text: |-
    #
    # This is a script to test file formats: JSON, YAML, XML.
    #
    ---
    - [start, "-type {0}"]
    - [contains, "?", "The program should asks the user for a favourite animal"]
    - [input, cat]
    - - matches
      - (?is).*1.*Play.*List.*Search.*stat.*Exit.*
      - The program should print the menu
    - [input, "1"]
    - - contains
      - You think of an animal, and I guess it.
      - The program should asks the user to think of an animal
    - [input, ""] # Press Enter to start the game

    #
    # The first game started
    #
    - - contains
      - Is it a cat?
      - The program should asks the user is it the cat
    - [input, no]
    - - contains
      - I give up. What animal do you have in mind?
      - The program should give up
    - [input, dog]
    - - contains
      - Specify a fact that distinguishes
      - The program should ask a question to distinguishes a dog from a cat
    - [input, It can climbs tree]
    - - contains
      - Is the statement correct for a dog?
      - The program should clarify if the statement is correct for a dog.
    - [input, No]
    - - matches
      - (?si).*(again|repeat|one more game).*
      - The program should ask to play again
    - [input, Yes]
    - - contains
      - You think of an animal, and I guess it.
      - The program should asks the user to think of an animal
    - [input, ""] # Press Enter to start the game

    #
    # The second game started
    #
    - - contains
      - Can it climbs tree?
      - The only question in the knowledge tree should be "Can it climbs tree?"
    - [input, Yes]
    - - contains
      - Is it a cat?
      - The program doesn't print the expected message
    - [input, No]
    - - contains
      - I give up. What animal do you have in mind?
      - The program should give up
    - - input
      - a lynx
    - - input
      - It is living in the forest
    - - contains
      - Is the statement correct for a lynx?
      - The program doesn't print the expected message
    - [input, yes]
    - [input, no]
    - - matches
      - (?is).*1.*Play.*List.*Search.*stat.*0.*Exit.*
      - The program should print the menu after the user leave the game
    - - input
      - "0"
    - - finish
      - The program should finish when user select 0. Exit

    - - file exists
      - "animals.{0}"
      - "The program should save knowledge tree to animals.{0} file."

    #
    # Start the program again and load the Knowledge Tree
    #
    - - start
      - "-type {0}"
    - - not contains
      - Which animal do you like most?
      - If knowledge base is exist the program should not asks the user for a favourite animal
    - - contains
      - Welcome to the animal
      - The program doesn't print the expected message
    - - matches
      - (?is).*1.*Play.*List.*Search.*stat.*Exit.*
      - The program should print the menu
    - - input
      - "0"
    - - finish
      - The program should finish when user refuse the new game
    - - file delete
      - "animals.{0}"
      - "The test can't delete animals.{0} file."
  learner_created: false
- name: test/GuessAnimalTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.io.IOException;

    public class GuessAnimalTest extends StageTest<String> {
        final String[] script = new String[]{
                "file-formats",
                "menu"
        };

        @DynamicTest(data = "script")
        CheckResult runScripts(final String script) throws IOException {
            return new Scenario(script).check();
        }

    }
  learner_created: false
- name: test/menu.data.yaml
  visible: false
  text: |-
    ---
    #
    # Test case #1
    #
    - - cat
      - |
        no
        shark
        it is a mammal
        no
        yes

        yes
        no
        fox
        it is living in the forest
        yes
        yes

        yes
        no
        no
        dog
        it can climb trees
        no
        yes

        yes
        yes
        no
        wolf
        it has a long bushy tail
        no
        yes

        yes
        yes
        no
        no
        hare
        it is a shy animal
        yes
        no

      #
      # 2. List of all animals
      #
      - "(?si).*cat.*dog.*hare.*shark.*wolf.*"

      #
      # 3. Search for an animal
      #
      - wolf
      - "(?si).*is a mammal.*doesn't have a long bushy tail.*isn't a shy animal.*"

      #
      # Data for the Knowledge Tree statistics
      #
      - It is a mammal
      - "11"
      - "6"
      - "5"
      - "4"
      - "1"
      - "3"
  learner_created: false
- name: test/menu.script.yaml
  visible: false
  text: |
    ---
    - [start]
    - [input, "{0}"]  # Favourite animal
    - [input, "1"]    # Play the game
    - [input, ""]     # Press Enter
    - [input, "{1}"]  # Play and fill the knowledge tree
    #
    # After filling the tree, we can test all the menu items.
    #
    - - matches
      - "(?is).*1.*Play.*List.*Search.*Calc.*Print.*Exit.*"
      - The program should print the menu

    #
    # 2. List of all animals
    #
    - [input, "2"]
    - [matches, "{2}", The program should print a list of all animals in alphabetical order.]

    #
    # 3. Search for an animal
    #
    - [input, "3"]
    - [contains, "Enter the animal", The program should ask for an animals to search.]
    - [input, "{3}"]
    - [matches, "{4}", The program should print facts about the animal]

    #
    # 4. Knowledge Tree stats
    #
    - [input, "4"]
    - [contains, "The Knowledge Tree stats", The program should print title for statistics]
    - [matches, "(?is).*root node.*{5}.*", "The root node should be {5}"]
    - [matches, "(?is).*number of nodes[^\\\\R]*{6}.*", "The total number of nodes should be {6}"]
    - [matches, "(?is).*number of animals[^\\\\R]*{7}.*", "The total number of animals should be {7}"]
    - [matches, "(?is).*number of statements[^\\\\R]*{8}.*", "The total number of statements should be {8}"]
    - [matches, "(?is).*height of the tree[^\\\\R]*{9}.*", "The height of the tree should be {9}"]
    - [matches, "(?is).*minimum[^\\\\R]*{10}.*", "The minimum depth should be {10}"]
    - [matches, "(?is).*average[^\\\\R]*{11}.*", "The average depth should be {11}"]
  learner_created: false
- name: test/Scenario.java
  visible: false
  text: |-
    import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.io.File;
    import java.io.IOException;
    import java.util.Map;
    import java.util.function.Predicate;
    import java.util.regex.Pattern;

    import static java.text.MessageFormat.format;
    import static java.util.function.Predicate.not;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class Scenario {
        private TestedProgram main;
        private String output = "";
        private final File dataFile;
        private final File scriptFile;

        Scenario(String name) {
            dataFile = new File("test/" + name + ".data.yaml");
            scriptFile = new File("test/" + name + ".script.yaml");
            System.out.println("Scenario '" + name + "' is started.");
            System.out.println();
        }

        CheckResult check() {

            final Object[][] data;
            final String[][] script;

            try {
                data = new YAMLMapper().readValue(dataFile, String[][].class);
                script = new YAMLMapper().readValue(scriptFile, String[][].class);
            } catch (IOException e) {
                e.printStackTrace();
                return wrong("Cannot find the files "
                        + dataFile.getName()
                        + " or "
                        + scriptFile.getName()
                        + ", looks like you deleted or renamed it. Please, revert the changes.");
            }

            for (var values : data) {
                for (var action : script) {
                    final var command = action[0];
                    switch (command) {
                        case "start":
                            main = new TestedProgram();
                            output = action.length == 1
                                    ? main.start()
                                    : main.start(format(action[1], values).split(" "));
                            output = output.trim();
                            continue;
                        case "input":
                            output = main.execute(format(action[1], values)).trim();
                            continue;
                        case "finish":
                            if (main.isFinished()) {
                                continue;
                            }
                            return wrong(format(action[1], values));
                        default:
                            final Map<String, Predicate<String>> validation = Map.of(
                                    "contains", output::contains,
                                    "not contains", not(output::contains),
                                    "file exists", file -> new File(file).exists(),
                                    "file delete", file -> new File(file).delete(),
                                    "find", pattern -> Pattern.compile(pattern).matcher(output).find(),
                                    "matches", output::matches);

                            final var expected = format(action[1], values);
                            if (validation.get(command).test(expected)) {
                                continue;
                            }
                            final var feedback = format(action[2], values) + System.lineSeparator()
                                    + "Expected " + command + ": \"" + expected + "\"" + System.lineSeparator()
                                    + "Actual data is: \"" + output + "\".";
                            return wrong(feedback);
                    }
                }
            }
            return correct();
        }

    }
  learner_created: false
- name: src/animals/Node.java
  visible: true
  text: |
    package animals;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonInclude;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    public class Node {
        private String value;
        private Node left;
        private Node right;

        public Node() {
        }

        public Node(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        public void setValue(String value) {
            this.value = value;
        }

        public Node getLeft() {
            return left;
        }

        public void setLeft(Node left) {
            this.left = left;
        }

        public Node getRight() {
            return right;
        }

        public void setRight(Node right) {
            this.right = right;
        }

        @JsonIgnore
        public String getNameWithoutArticle() {
            return this.getValue().substring(2).trim();
        }

        @JsonIgnore
        public boolean hasChildren() {
            return this.left != null && this.right != null;
        }
    }
  learner_created: true
- name: src/animals/BinaryTree.java
  visible: true
  text: |
    package animals;

    public record BinaryTree(Node root) {
    }
  learner_created: true
- name: src/animals/UI.java
  visible: true
  text: |
    package animals;

    import com.fasterxml.jackson.databind.ObjectMapper;

    import java.io.File;
    import java.util.*;

    public class UI {
        private final Scanner scanner;
        private BinaryTree binaryTree;
        private final CommandProcessor cp;
        private final String fileName;
        private final ObjectMapper objectMapper;

        public UI(String fileExt, ObjectMapper objectMapper) {
            this.fileName = String.format("animals.%s", fileExt);
            this.scanner = new Scanner(System.in);
            this.cp = new CommandProcessor();
            this.objectMapper = objectMapper;
        }

        public void start() {
            cp.greet();
            tryToLoadFile();
            playGame();
            cp.bye();
        }
        private void tryToLoadFile() {
            try {
                Node root = objectMapper.readValue(new File(fileName), Node.class);
                this.binaryTree = new BinaryTree(root);
            } catch (Exception e) {
                System.out.println(e.getMessage());
                askForAnimal();
            }
        }

        private void askForAnimal() {
            System.out.println("I want to learn about animals.");
            System.out.print("Which animal do you like most?\n> ");
            Node favoriteAnimal = getAnimal(scanner.nextLine());
            System.out.println("Wonderful! I've learned so much about animals!");
            this.binaryTree = new BinaryTree(favoriteAnimal);
        }

        private void playGame() {
            System.out.println("Let's play a game!");

            while (true) {
                System.out.println("You think of an animal, and I guess it.");
                System.out.print("Press enter when you're ready.\n>");
                scanner.nextLine();

                Node firstAnimal = findAnimal();

                System.out.printf("Is it %s?%n> ", firstAnimal.getValue());
                while (true) {
                    String answer = cp.processAnswer(scanner.nextLine());
                    if (answer.equals("no")) {
                        System.out.println("I give up. What animal do you have in mind?");
                        Node newAnimal = getAnimal(scanner.nextLine());
                        getFact(firstAnimal, newAnimal);
                        break;
                    } else if (answer.equals("yes")) {
                        System.out.println("Nice! I've learned so much about animals!");
                        break;
                    } else {
                        cp.askYesOrNo();
                    }
                }
                System.out.println("Would you like to play again?");
                String answer = cp.processAnswer(scanner.nextLine());
                while (answer.equals("unknown answer")) {
                    cp.askYesOrNo();
                    answer = cp.processAnswer(scanner.nextLine());
                }
                if (answer.equals("no")) {
                    try {
                        objectMapper
                                .writerWithDefaultPrettyPrinter()
                                .writeValue(new File(fileName), this.binaryTree.root());
                    } catch (Exception e) {
                        System.out.println(e.getMessage());
                    }
                    break;
                }
            }
        }

        private Node findAnimal() {
            Node node = this.binaryTree.root();
            while (true) {
                if (!node.hasChildren()) {
                    return node;
                }
                System.out.println(cp.getQuestion(node.getValue()));
                while (true) {
                    String answer = cp.processAnswer(scanner.nextLine());
                    if (answer.equals("yes")) {
                        node = node.getRight();
                        break;
                    } else if (answer.equals("no")) {
                        node = node.getLeft();
                        break;
                    } else {
                        cp.askYesOrNo();
                    }
                }
            }
        }

        private void getFact(Node lastNode, Node secondAnimal) {
            Node firstAnimal = new Node(lastNode.getValue());
            String fact;
            while (true) {
                System.out.printf("Specify a fact that distinguishes %s from %s.%n"
                        , firstAnimal.getValue(), secondAnimal.getValue());
                System.out.println("""
                        The sentence should satisfy one of the following templates:
                        - It can ...
                        - It has ...
                        - It is a/an ...""");
                System.out.print("\n> ");
                fact = scanner.nextLine().toLowerCase().trim().replaceAll("[?,.!]", "");
                if (!fact.matches("it (can|has|is) [\\w\\s]+")) {
                    System.out.println("The examples of a statement:\n - It can fly\n - It has horn\n - It is a mammal");
                    continue;
                }

                lastNode.setValue(fact);

                System.out.printf("Is the statement correct for %s?%n> ", secondAnimal.getValue());
                while (true) {
                    String answer = scanner.nextLine();
                    if (cp.processAnswer(answer).equals("yes")) {
                        lastNode.setRight(secondAnimal);
                        lastNode.setLeft(firstAnimal);
                        break;
                    }
                    if (cp.processAnswer(answer).equals("no")) {
                        lastNode.setRight(firstAnimal);
                        lastNode.setLeft(secondAnimal);
                        break;
                    }
                    cp.askYesOrNo();
                }
                break;
            }
            System.out.println("I have learned the following facts about animals:");
            System.out.println(cp.getFact(lastNode, firstAnimal));
            System.out.println(cp.getFact(lastNode, secondAnimal));
            System.out.println("I can distinguish these animals by asking the question:");
            System.out.println(" - " + cp.getQuestion(fact));
            System.out.println("Nice! I've learned so much about animals!");
            System.out.println();
        }

        private Node getAnimal(String input) {
            String name = input.toLowerCase();
            String[] parts = name.split(" ");
            String article;

            if (parts.length != 1) {
                if (parts[0].matches("a|an")) {
                    return new Node(name);
                } else if (parts[0].matches("the")) {
                    name = name.replace("the", "").trim();
                }
            }
            if (name.substring(0, 1).matches("[aeiouy]")) {
                article = "an";
            } else {
                article = "a";
            }
            return new Node(String.format("%s %s", article, name));
        }
    }
  learner_created: true
- name: src/animals/CommandProcessor.java
  visible: true
  text: |
    package animals;

    import java.time.LocalTime;
    import java.util.List;
    import java.util.Random;

    public class CommandProcessor {
        private final Random rnd;

        public CommandProcessor() {
            this.rnd = new Random();
        }

        public void greet() {
            LocalTime now = LocalTime.now();
            if (now.isAfter(LocalTime.of(5, 0)) && now.isBefore(LocalTime.NOON)) {
                System.out.println("Good morning");
            } else if (!now.isBefore(LocalTime.NOON) && now.isBefore(LocalTime.of(18, 0))) {
                System.out.println("Good afternoon");
            } else {
                System.out.println("Good evening");
            }
            System.out.println();
        }

        public void bye() {
            List<String> byeList = List.of("Goodbye!", "Bye!", "Have a nice day!"
                    , "See you soon!", "Nara mordeczko", "Out.");
            System.out.println();
            System.out.println(byeList.get(rnd.nextInt(byeList.size())));
        }

        public String processAnswer(String answer) {
            List<String> yes = List.of("y", "yes", "yeah", "yep", "sure", "right"
                    , "affirmative", "correct", "indeed", "you bet", "exactly", "you said it");
            List<String> no = List.of("n", "no", "no way", "nah", "nope", "negative", "i don't think so", "yeah no");

            if (answer.endsWith(".") || answer.endsWith("!")) {
                answer = answer.substring(0, answer.length() - 1);
            }

            if (yes.contains(answer.trim().toLowerCase())) {
                return "yes";
            } else if (no.contains(answer.trim().toLowerCase())) {
                return "no";
            } else {
                return "unknown answer";
            }
        }

        public void askYesOrNo() {
            List<String> yesOrNo = List.of(
                    "I'm not sure I caught you: was it yes or no?",
                    "Funny, I still don't understand, is it yes or no?",
                    "Oh, it's too complicated for me: just tell me yes or no.",
                    "Could you please simply say yes or no?",
                    "Oh, no, don't try to confuse me: say yes or no.");
            System.out.println(yesOrNo.get(rnd.nextInt(yesOrNo.size())));
        }

        public String getQuestion(String fact) {
            return fact.replace("it is", "Is it")
                    .replace("it can", "Can it")
                    .replace("it has", "Does it have") + "?";
        }

        public String getFact(Node parentNode, Node animal) {
            String fact;
            if (parentNode.getLeft() == animal) {
                fact = parentNode.getValue().replace("can", "can't")
                        .replace("has", "doesn't have")
                        .replace("is", "isn't");
            } else {
                fact = parentNode.getValue();
            }
            return String.format("The %s%s.", animal.getNameWithoutArticle(), fact.replaceFirst("it", ""));
        }
    }
  learner_created: true
- name: src/animals/TreeStatistics.java
  visible: true
  learner_created: true
- name: animals.json
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11083#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 27 Dec 2022 20:37:41 UTC"
record: 5
